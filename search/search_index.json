{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"examples/","title":"Arduino Examples","text":""},{"location":"examples/#example-1-basic-color-sensing","title":"Example 1: Basic Color Sensing","text":"<p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example1_BasicColorSensing:</p> <p></p> <p>Finding Example 1</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 1: Basic Color Sensing <pre><code>/*\nExample 1 - Basic Color Sensing\n\nThis example shows the basic operation of the OPT4048 Color Sensor. \nIf you're curious about CIE 1931 color space, check out this link:\nhttps://en.wikipedia.org/wiki/CIE_1931_color_space\n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 1 Basic Color Sensing.\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    myColor.setBasicSetup();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"CIEx: \");\n    Serial.print(myColor.getCIEx());\n    Serial.print(\" CIEy: \");\n    Serial.println(myColor.getCIEy());\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 200ms conversion time = 600ms.\n    delay(200);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 1 Output</p> <p>The CIEx and CIEy values are going to fall somewhere between 0 and 1. Page 35 of the datasheet gives more detail on this, but generally speaking, you can map the predominant color of the space you're measuring using the following: </p> <p></p> <p>CIE XY and CIE UV space plots of color coordinates</p> <p>For more information on the CIE and CIY values, refer to the CIE 1931 Color Space Wiki Page.</p>"},{"location":"examples/#example-2-basic-lux-readings","title":"Example 2: Basic Lux Readings","text":"<p>This example measures the lux readings of the surrounding environment. To find Example 2, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example2_BasicLuxSensing:</p> <p></p> <p>Finding Example 2</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 2: Basic Lux Sensing Arduino Code <pre><code>/*\nExample 2 - Basic Lux Sensing\n\nThis example shows the basic operation of the OPT4048 Color Sensor\nfor sensing light intensity.\n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 2 Basic Lux Sensing.\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    myColor.setBasicSetup();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"Lux:\");\n    Serial.print(myColor.getLux());\n    // Delay time is set to the conversion time * number of channels\n    // You only need one channel for sensing light intensity @ 200ms conversion time = 200ms. \n    delay(200);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 2 Output</p> <p>Lux values will be measured anywhere from 2.15 mlux to 144 klux. Measurements here start at my general office lighting, and then I put my finger over the sensor. </p>"},{"location":"examples/#example-3-basic-color-warmth","title":"Example 3: Basic Color Warmth","text":"<p>This example measures the basic color warmth. To find Example 3, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example3_BasicColorWarmth:</p> <p></p> <p>Finding Example 3</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 3: Basic Color Warmth Arduino Code <pre><code>/*\nExample 3 - Color Warmth\n\nThis example shows how to retrieve the Corelated Color Temperature (CCT) from the OPT4048.\nIf you need more information on CCT, check out this Wikipedia article:\nhttps://en.wikipedia.org/wiki/Correlated_color_temperature\n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 3 Basic Color Warmth.\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    myColor.setBasicSetup();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"Color Warmth: \");\n    Serial.print(myColor.getCCT());\n    Serial.println(\"K\");\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 200ms conversion time = 600ms.\n    delay(600);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 3 Output</p> <p>Color warmth addresses the perceived \"feel\" of the color. Color temperatures over 5000 K are called \"cool colors\" (bluish), while lower color temperatures (2700\u20133000 K) are called \"warm colors\" (yellowish). </p> <p></p> <p>For more information on color temperature values, refer to the Color temperature Wiki Page.</p>"},{"location":"examples/#example-4-color-settings","title":"Example 4: Color Settings","text":"<p>The color settings example lists the conversion times for each channel. In a nutshell, the longer the conversion time, the more accurate the read values. To find Example 4, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example4_ColorSettings:</p> <p></p> <p>Finding Example 4</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 4: Basic Color Senttings <pre><code>/*\nExample 4 - This example shows some of the examples. \n\nThis example shows the various settings for the OPT4048 and how to set and read them. \n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 4 OPT4048 Advanced Settings\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    /////////////////////////////////////////////General Settings\n    /*\n     RANGE_2KLUX2,\n     RANGE_4KLUX5,\n     RANGE_9LUX,\n     RANGE_18LUX,\n     RANGE_36LUX,\n     RANGE_72LUX,\n     RANGE_144LUX,\n     RANGE_AUTO\n     A higher color range will result in a lower resolution.\n     The RANGE_AUTO option will automatically select the best \n     range for the current light conditions.\n    */\n    myColor.setRange(RANGE_2KLUX2);\n    Serial.print(\"Range set to: \");\n    Serial.println(myColor.getRange());\n    //\n\n    /*\n     CONVERSION_TIME_600US,\n     CONVERSION_TIME_1MS,\n     CONVERSION_TIME_1MS8,\n     CONVERSION_TIME_3MS4,\n     CONVERSION_TIME_6MS5,\n     CONVERSION_TIME_12MS7,\n     CONVERSION_TIME_25MS,\n     CONVERSION_TIME_50MS,\n     CONVERSION_TIME_100MS,\n     CONVERSION_TIME_200MS,\n     CONVERSION_TIME_400MS,\n     CONVERSION_TIME_800MS\n     A higher conversion time will result in more precise readings. \n     For color sensing, having the highest converstion time is suggested.\n    */\n    myColor.setConversionTime(CONVERSION_TIME_800MS);\n    Serial.print(\"Conversion time set to:\");\n    Serial.println(myColor.getConversionTime());\n\n    /*\n     OPERATION_MODE_POWER_DOWN,\n     OPERATION_MODE_AUTO_ONE_SHOT,\n     OPERATION_MODE_ONE_SHOT,\n     OPERATION_MODE_CONTINUOUS\n    */\n    myColor.setOperationMode(OPERATION_MODE_CONTINUOUS);\n    Serial.print(\"Conversion time set to:\");\n    Serial.println(myColor.getOperationMode());\n\n   // The Quick wake setting changes the behavior of the chip while in power down mode: \n   // Not all of the circuitry will be powered down. \n   // myColor.setQwake();\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"CIEx: \");\n    Serial.println(myColor.getCIEx());\n    Serial.print(\"CIEy: \");\n    Serial.println(myColor.getCIEy());\n    Serial.print(\"CCT: \");\n    Serial.println(myColor.getCCT());\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 800ms conversion time = 3200ms.\n    delay(3200);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 4 Output</p>"},{"location":"examples/#example-5-interrupt","title":"Example 5: Interrupt","text":"<p>The OPT4048 Color Sensor can be triggered by an interrupt if desired. Example 5 shows a simple setup case. To find Example 5, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example5_Interrupt:</p> <p></p> <p>Finding Example 5</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 5: Interrupt <pre><code>/*\nExample 5 - Interrupts\n\nThis example shows the various interrupt settings and their uses. \n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nint interruptPin = 3; \n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 5 - Interrupts.\");\n\n    pinMode(interruptPin, INPUT);\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    // See Color Settings Example for functions for setting\n    // converstion time, range, and mode. \n    myColor.setBasicSetup();\n\n    // Basic usage: if interrupt is set to latched mode\n    //myColor.setIntLatch();\n    myColor.setIntMechanism(INT_DR_ALL_CHANNELS);\n\n    // Select the channel that will fire the interrupt\n    // Lux values are generated in Channel One.\n    //myColor.setThresholdChannel(THRESH_CHANNEL_CH1);\n\n    // Change the interrupt direction to active HIGH. \n    //myColor.setIntActiveHigh();\n\n    // Change the interrupt to an INPUT to trigger measurements\n    // set operation mode to one shot mode in this case. \n    // myColor.setIntInput();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    if(digitalRead(interruptPin) == LOW)\n    {\n        Serial.print(\"CIEx: \");\n        Serial.println(myColor.getCIEx());\n        Serial.print(\"CIEy: \");\n        Serial.println(myColor.getCIEy());\n    }\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 200ms conversion time = 600ms.\n    delay(200);\n}\n</code></pre> <p>The hardware setup should look something like this: </p> <p></p> <p>Example 5 Setup</p> <p>The example code sets the interrupt pin as Pin 3, but if you change the code, you'll need to change the hardware setup. </p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. </p> <p></p> <p>Example 5 Output</p> <p>The output here sits at \"Ready to go\" until pin 3 is pulled low, then the output starts to roll by. </p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>Connecting to the Tristimulus Color breakout is simple. You will just need a microcontroller to process the data when using the OPT4048 and a Qwiic cable. In this case, we used a SparkFun RedBoard Qwiic.</p> <p></p> <p>SparkFun Tristimulus Color Sensor Hooked Up to RedBoard Qwiic via a Qwiic Cable</p> <p></p> <p>SparkFun Mini Tristimulus Color Sensor Hooked Up to RedBoard Qwiic via a Qwiic Cable</p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<p>If you prefer to use the plated through holes on the board, you'll need to solder headers to them. Here we've soldered male headers to the breakout board and attached the jumpers as follows: </p> <ul> <li>Yellow = SCL</li> <li>Blue = SDA</li> <li>Red = 3.3V</li> <li>Black = GND</li> <li>Green = Interrupt</li> </ul> <ul> <li> <p>      PTH Hookup of Tristimulus Color Sensor      </p> </li> <li> <p>      PTH Hookup of Mini Tristimulus Color Sensor      </p> </li> </ul> <p> PTH Hookup of Tristimulus Color Sensor PTH Hookup of Mini Tristimulus Color Sensor <p></p> <p>Click on either image for a closer view.</p>"},{"location":"hardware_assembly/#new-to-soldering","title":"New to Soldering?","text":"<p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <p>      How to Solder: Through-Hole Soldering </p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#color-sensor-opt4048","title":"Color Sensor - OPT4048","text":"<p>The OPT4048 from Texas Instruments is a single-chip high resolution color sensor, capable of measuring four channels each with specific engineered spectral responses. Three of the four channels closely match the CIE tristimulus spectra with the fourth channel having a wide band spectral response. With measurements from these channels, important characteristics of the lighting environment can be extracted like (i) light intensity (lux), (ii) color in CIE XY, LUV coordinates and (iii) Correlated Color Temperature. For more information, refer to the datasheet.</p> <p> The OPT4048 on the Tristimulus Color Sensor. The OPT4048 on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The OPT4048 on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The OPT4048 on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>The boards include two Qwiic connectors on each side of the board.</p> <p> The QwiicConnectors on the Tristimulus Color Sensor. The QwiicConnectors on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The QwiicConnectors on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The QwiicConnectors on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#power-pins","title":"Power Pins","text":"<p>Ideally, power to these boards will be provided by the Qwiic cables. However, should you wish to provide power separately, the boards have pins broken out to PTH and you can wire up power via these. </p> <p>Warning</p> <p><p>Make sure to pay attention to logic levels - supply voltage range should be between 1.71V - 3.6V.</p></p> <p> The Power Pins on the Tristimulus Color Sensor. The Power Pins on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The Power Pins on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The Power Pins on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#i2c-pins","title":"I<sup>2</sup>C Pins","text":"<p>If you do not want to use the Qwiic connectors, I<sup>2</sup>C functionality has been broken out to PTH pins.</p> <p> The I<sup>2</sup>C Pins on the Tristimulus Color Sensor. The I<sup>2</sup>C Pins on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The I<sup>2</sup>C Pins on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The I<sup>2</sup>C Pins on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>When appropriate power is provided to the board, the power LED lights up on the front of the board. </p> <p> The Power LED on the Tristimulus Color Sensor. The Power LED on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The Power LED on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The Power LED on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"hardware_overview/#address-selection","title":"Address Selection","text":"<p>The SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) boards have a default I<sup>2</sup>C address of 0x44, but by manipulating the address jumpers on the back of the board, you can select 0x45 or 0x46.</p> <p> The Address Jumpers on the Tristimulus Color Sensor. The Address Jumpers on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The Address Jumpers on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The Address Jumpers on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#led-jumpers","title":"LED Jumpers","text":"<p>If you are concerned about power consumption or you just don't like LEDs, cut the traces here to disconnect the Power LED from, you guessed it, power. </p> <p> The LED Jumpers on the Tristimulus Color Sensor. The LED Jumpers on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The LED Jumper on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The LED Jumper on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#i2c","title":"I<sup>2</sup>C","text":"<p>Like our other Qwiic boards, the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) boards come equipped with pull-up resistors on the clock and data pins. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joint between the two jumper pads highlighted below.</p> <p> The I<sup>2</sup>C Jumper on the Tristimulus Color Sensor. The I<sup>2</sup>C Jumper on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The I<sup>2</sup>C Jumper on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The I<sup>2</sup>C Jumper on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) follows the standard 1\" x 1\" convention of most of our Qwiic breakout boards. </p> <p></p> <p>SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) Board Outline</p> <p>The SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) measures 1\" x 0.5\". </p> <p></p> <p>SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) Board  Outline</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the 1\" x 1\" board, or the Eagle files for the Mini board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download from:autodesk-primary:{ .autodesk } </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SKU: SEN-22638 <p> </p> <p>The SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) is built around the OPT4048 High Speed High Precision Tristimulus XYZ Color Sensor from Texas Instruments. It is a 1\" x 1\" Qwiic enabled board that can support up to 4 devices on a shared I<sup>2</sup>C bus - each capable of measuring four channels with specific engineered spectral responses.</p> <p> Purchase from SparkFun  </p> <li> <p> SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SKU: SEN-22639 <p> </p> <p>The Mini version of the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) maintains all the functionality of the 1\" x 1\" breakout board, but in a smaller footprint. </p> <p> Purchase from SparkFun  </p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Now some users may already have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li> <p> <p>SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SEN-22638</p> <li> <p> <p>SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SEN-22639</p> <li> <p> <p>SparkFun RedBoard Qwiic DEV-15123</p> <li> <p> <p>Flexible Qwiic Cable - 100mm PRT-17259</p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we recommend checking out these tutorials before continuing.</p> <ul> <li> <p> Qwiic Connect System</p> </li> <li> <p> I<sup>2</sup>C</p> </li> <li> <p> Light</p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) boards, check out the links listed here: </p> <p>SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic):</p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> </ul> <p>SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic):</p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> </ul> <p>General: </p> <ul> <li>Hardware GitHub Respository</li> <li>Arduino Library </li> <li>OPT4048 Datasheet (PDF)</li> </ul>"},{"location":"single_page/","title":"Hardware Overview","text":""},{"location":"single_page/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SKU: SEN-22638 <p> </p> <p>The SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) is built around the OPT4048 High Speed High Precision Tristimulus XYZ Color Sensor from Texas Instruments. It is a 1\" x 1\" Qwiic enabled board that can support up to 4 devices on a shared I<sup>2</sup>C bus - each capable of measuring four channels with specific engineered spectral responses.</p> <p> Purchase from SparkFun  </p> <li> <p> SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SKU: SEN-22639 <p> </p> <p>The Mini version of the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) maintains all the functionality of the 1\" x 1\" breakout board, but in a smaller footprint. </p> <p> Purchase from SparkFun  </p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Now some users may already have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li> <p> <p>SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SEN-22638</p> <li> <p> <p>SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) SEN-22639</p> <li> <p> <p>SparkFun RedBoard Qwiic DEV-15123</p> <li> <p> <p>Flexible Qwiic Cable - 100mm PRT-17259</p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we recommend checking out these tutorials before continuing.</p> <ul> <li> <p> Qwiic Connect System</p> </li> <li> <p> I<sup>2</sup>C</p> </li> <li> <p> Light</p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#color-sensor-opt4048","title":"Color Sensor - OPT4048","text":"<p>The OPT4048 from Texas Instruments is a single-chip high resolution color sensor, capable of measuring four channels each with specific engineered spectral responses. Three of the four channels closely match the CIE tristimulus spectra with the fourth channel having a wide band spectral response. With measurements from these channels, important characteristics of the lighting environment can be extracted like (i) light intensity (lux), (ii) color in CIE XY, LUV coordinates and (iii) Correlated Color Temperature. For more information, refer to the datasheet.</p> <p> The OPT4048 on the Tristimulus Color Sensor. The OPT4048 on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The OPT4048 on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The OPT4048 on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>The boards include two Qwiic connectors on each side of the board.</p> <p> The QwiicConnectors on the Tristimulus Color Sensor. The QwiicConnectors on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The QwiicConnectors on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The QwiicConnectors on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#power-pins","title":"Power Pins","text":"<p>Ideally, power to these boards will be provided by the Qwiic cables. However, should you wish to provide power separately, the boards have pins broken out to PTH and you can wire up power via these. </p> <p>Warning</p> <p><p>Make sure to pay attention to logic levels - supply voltage range should be between 1.71V - 3.6V.</p></p> <p> The Power Pins on the Tristimulus Color Sensor. The Power Pins on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The Power Pins on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The Power Pins on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#i2c-pins","title":"I<sup>2</sup>C Pins","text":"<p>If you do not want to use the Qwiic connectors, I<sup>2</sup>C functionality has been broken out to PTH pins.</p> <p> The I<sup>2</sup>C Pins on the Tristimulus Color Sensor. The I<sup>2</sup>C Pins on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The I<sup>2</sup>C Pins on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The I<sup>2</sup>C Pins on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>When appropriate power is provided to the board, the power LED lights up on the front of the board. </p> <p> The Power LED on the Tristimulus Color Sensor. The Power LED on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The Power LED on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The Power LED on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"single_page/#address-selection","title":"Address Selection","text":"<p>The SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) boards have a default I<sup>2</sup>C address of 0x44, but by manipulating the address jumpers on the back of the board, you can select 0x45 or 0x46.</p> <p> The Address Jumpers on the Tristimulus Color Sensor. The Address Jumpers on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The Address Jumpers on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The Address Jumpers on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#led-jumpers","title":"LED Jumpers","text":"<p>If you are concerned about power consumption or you just don't like LEDs, cut the traces here to disconnect the Power LED from, you guessed it, power. </p> <p> The LED Jumpers on the Tristimulus Color Sensor. The LED Jumpers on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The LED Jumper on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The LED Jumper on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#i2c","title":"I<sup>2</sup>C","text":"<p>Like our other Qwiic boards, the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) boards come equipped with pull-up resistors on the clock and data pins. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joint between the two jumper pads highlighted below.</p> <p> The I<sup>2</sup>C Jumper on the Tristimulus Color Sensor. The I<sup>2</sup>C Jumper on the Mini Tristimulus Color Sensor. <p></p> <ul> <li> <p>      The I<sup>2</sup>C Jumper on the Tristimulus Color Sensor.      </p> </li> <li> <p>      The I<sup>2</sup>C Jumper on the Mini Tristimulus Color Sensor.      </p> </li> </ul>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) follows the standard 1\" x 1\" convention of most of our Qwiic breakout boards. </p> <p></p> <p>SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) Board Outline</p> <p>The SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) measures 1\" x 0.5\". </p> <p></p> <p>SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic) Board  Outline</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the 1\" x 1\" board, or the Eagle files for the Mini board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download from:autodesk-primary:{ .autodesk } </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>Connecting to the Tristimulus Color breakout is simple. You will just need a microcontroller to process the data when using the OPT4048 and a Qwiic cable. In this case, we used a SparkFun RedBoard Qwiic.</p> <p></p> <p>SparkFun Tristimulus Color Sensor Hooked Up to RedBoard Qwiic via a Qwiic Cable</p> <p></p> <p>SparkFun Mini Tristimulus Color Sensor Hooked Up to RedBoard Qwiic via a Qwiic Cable</p>"},{"location":"single_page/#soldered-assembly","title":"Soldered Assembly","text":"<p>If you prefer to use the plated through holes on the board, you'll need to solder headers to them. Here we've soldered male headers to the breakout board and attached the jumpers as follows: </p> <ul> <li>Yellow = SCL</li> <li>Blue = SDA</li> <li>Red = 3.3V</li> <li>Black = GND</li> <li>Green = Interrupt</li> </ul> <ul> <li> <p>      PTH Hookup of Tristimulus Color Sensor      </p> </li> <li> <p>      PTH Hookup of Mini Tristimulus Color Sensor      </p> </li> </ul> <p> PTH Hookup of Tristimulus Color Sensor PTH Hookup of Mini Tristimulus Color Sensor <p></p> <p>Click on either image for a closer view.</p>"},{"location":"single_page/#new-to-soldering","title":"New to Soldering?","text":"<p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <p>      How to Solder: Through-Hole Soldering </p>"},{"location":"single_page/#arduino-library","title":"Arduino Library","text":""},{"location":"single_page/#software-setup","title":"Software Setup","text":"<p>Arduino</p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"single_page/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"single_page/#opt4048","title":"OPT4048","text":"<p>SparkFun has written a library to work with the SparkFun Tristimulus Color Sensors. This library can be used by extension with the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic). You can obtain this library through the Arduino Library Manager by searching for \"OPT4048\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun OPT4048 Arduino Library (ZIP)"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":""},{"location":"single_page/#example-1-basic-color-sensing","title":"Example 1: Basic Color Sensing","text":"<p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example1_BasicColorSensing:</p> <p></p> <p>Finding Example 1</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 1: Basic Color Sensing <pre><code>/*\nExample 1 - Basic Color Sensing\n\nThis example shows the basic operation of the OPT4048 Color Sensor. \nIf you're curious about CIE 1931 color space, check out this link:\nhttps://en.wikipedia.org/wiki/CIE_1931_color_space\n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 1 Basic Color Sensing.\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    myColor.setBasicSetup();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"CIEx: \");\n    Serial.print(myColor.getCIEx());\n    Serial.print(\" CIEy: \");\n    Serial.println(myColor.getCIEy());\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 200ms conversion time = 600ms.\n    delay(200);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 1 Output</p> <p>The CIEx and CIEy values are going to fall somewhere between 0 and 1. Page 35 of the datasheet gives more detail on this, but generally speaking, you can map the predominant color of the space you're measuring using the following: </p> <p></p> <p>CIE XY and CIE UV space plots of color coordinates</p> <p>For more information on the CIE and CIY values, refer to the CIE 1931 Color Space Wiki Page.</p>"},{"location":"single_page/#example-2-basic-lux-readings","title":"Example 2: Basic Lux Readings","text":"<p>This example measures the lux readings of the surrounding environment. To find Example 2, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example2_BasicLuxSensing:</p> <p></p> <p>Finding Example 2</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 2: Basic Lux Sensing Arduino Code <pre><code>/*\nExample 2 - Basic Lux Sensing\n\nThis example shows the basic operation of the OPT4048 Color Sensor\nfor sensing light intensity.\n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 2 Basic Lux Sensing.\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    myColor.setBasicSetup();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"Lux:\");\n    Serial.print(myColor.getLux());\n    // Delay time is set to the conversion time * number of channels\n    // You only need one channel for sensing light intensity @ 200ms conversion time = 200ms. \n    delay(200);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 2 Output</p> <p>Lux values will be measured anywhere from 2.15 mlux to 144 klux. Measurements here start at my general office lighting, and then I put my finger over the sensor. </p>"},{"location":"single_page/#example-3-basic-color-warmth","title":"Example 3: Basic Color Warmth","text":"<p>This example measures the basic color warmth. To find Example 3, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example3_BasicColorWarmth:</p> <p></p> <p>Finding Example 3</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 3: Basic Color Warmth Arduino Code <pre><code>/*\nExample 3 - Color Warmth\n\nThis example shows how to retrieve the Corelated Color Temperature (CCT) from the OPT4048.\nIf you need more information on CCT, check out this Wikipedia article:\nhttps://en.wikipedia.org/wiki/Correlated_color_temperature\n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 3 Basic Color Warmth.\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    myColor.setBasicSetup();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"Color Warmth: \");\n    Serial.print(myColor.getCCT());\n    Serial.println(\"K\");\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 200ms conversion time = 600ms.\n    delay(600);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 3 Output</p> <p>Color warmth addresses the perceived \"feel\" of the color. Color temperatures over 5000 K are called \"cool colors\" (bluish), while lower color temperatures (2700\u20133000 K) are called \"warm colors\" (yellowish). </p> <p></p> <p>For more information on color temperature values, refer to the Color temperature Wiki Page.</p>"},{"location":"single_page/#example-4-color-settings","title":"Example 4: Color Settings","text":"<p>The color settings example lists the conversion times for each channel. In a nutshell, the longer the conversion time, the more accurate the read values. To find Example 4, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example4_ColorSettings:</p> <p></p> <p>Finding Example 4</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 4: Basic Color Senttings <pre><code>/*\nExample 4 - This example shows some of the examples. \n\nThis example shows the various settings for the OPT4048 and how to set and read them. \n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 4 OPT4048 Advanced Settings\");\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    /////////////////////////////////////////////General Settings\n    /*\n     RANGE_2KLUX2,\n     RANGE_4KLUX5,\n     RANGE_9LUX,\n     RANGE_18LUX,\n     RANGE_36LUX,\n     RANGE_72LUX,\n     RANGE_144LUX,\n     RANGE_AUTO\n     A higher color range will result in a lower resolution.\n     The RANGE_AUTO option will automatically select the best \n     range for the current light conditions.\n    */\n    myColor.setRange(RANGE_2KLUX2);\n    Serial.print(\"Range set to: \");\n    Serial.println(myColor.getRange());\n    //\n\n    /*\n     CONVERSION_TIME_600US,\n     CONVERSION_TIME_1MS,\n     CONVERSION_TIME_1MS8,\n     CONVERSION_TIME_3MS4,\n     CONVERSION_TIME_6MS5,\n     CONVERSION_TIME_12MS7,\n     CONVERSION_TIME_25MS,\n     CONVERSION_TIME_50MS,\n     CONVERSION_TIME_100MS,\n     CONVERSION_TIME_200MS,\n     CONVERSION_TIME_400MS,\n     CONVERSION_TIME_800MS\n     A higher conversion time will result in more precise readings. \n     For color sensing, having the highest converstion time is suggested.\n    */\n    myColor.setConversionTime(CONVERSION_TIME_800MS);\n    Serial.print(\"Conversion time set to:\");\n    Serial.println(myColor.getConversionTime());\n\n    /*\n     OPERATION_MODE_POWER_DOWN,\n     OPERATION_MODE_AUTO_ONE_SHOT,\n     OPERATION_MODE_ONE_SHOT,\n     OPERATION_MODE_CONTINUOUS\n    */\n    myColor.setOperationMode(OPERATION_MODE_CONTINUOUS);\n    Serial.print(\"Conversion time set to:\");\n    Serial.println(myColor.getOperationMode());\n\n   // The Quick wake setting changes the behavior of the chip while in power down mode: \n   // Not all of the circuitry will be powered down. \n   // myColor.setQwake();\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    Serial.print(\"CIEx: \");\n    Serial.println(myColor.getCIEx());\n    Serial.print(\"CIEy: \");\n    Serial.println(myColor.getCIEy());\n    Serial.print(\"CCT: \");\n    Serial.println(myColor.getCCT());\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 800ms conversion time = 3200ms.\n    delay(3200);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 4 Output</p>"},{"location":"single_page/#example-5-interrupt","title":"Example 5: Interrupt","text":"<p>The OPT4048 Color Sensor can be triggered by an interrupt if desired. Example 5 shows a simple setup case. To find Example 5, go to File &gt; Examples &gt; SparkFun Color Sensor OPT4048 &gt; example5_Interrupt:</p> <p></p> <p>Finding Example 5</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 5: Interrupt <pre><code>/*\nExample 5 - Interrupts\n\nThis example shows the various interrupt settings and their uses. \n\nWritten by Elias Santistevan @ SparkFun Electronics, July 2023\n\nProducts:\n    Qwiic 1x1: https://www.sparkfun.com/products/22638\n    Qwiic Mini: https://www.sparkfun.com/products/22639\n\nRepository:\n    https://github.com/sparkfun/SparkFun_OPT4048_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT \nLicense (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_OPT4048.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_OPT4048 myColor;\n\nint interruptPin = 3; \n\nvoid setup()\n{\n    Serial.begin(115200);\n    Serial.println(\"OPT4048 Example 5 - Interrupts.\");\n\n    pinMode(interruptPin, INPUT);\n\n    Wire.begin();\n\n    if (!myColor.begin()) {\n        Serial.println(\"OPT4048 not detected- check wiring or that your I2C address is correct!\");\n        while (1) ;\n    }\n\n    // See Color Settings Example for functions for setting\n    // converstion time, range, and mode. \n    myColor.setBasicSetup();\n\n    // Basic usage: if interrupt is set to latched mode\n    //myColor.setIntLatch();\n    myColor.setIntMechanism(INT_DR_ALL_CHANNELS);\n\n    // Select the channel that will fire the interrupt\n    // Lux values are generated in Channel One.\n    //myColor.setThresholdChannel(THRESH_CHANNEL_CH1);\n\n    // Change the interrupt direction to active HIGH. \n    //myColor.setIntActiveHigh();\n\n    // Change the interrupt to an INPUT to trigger measurements\n    // set operation mode to one shot mode in this case. \n    // myColor.setIntInput();\n\n    Serial.println(\"Ready to go!\");\n}\n\nvoid loop()\n{\n    if(digitalRead(interruptPin) == LOW)\n    {\n        Serial.print(\"CIEx: \");\n        Serial.println(myColor.getCIEx());\n        Serial.print(\"CIEy: \");\n        Serial.println(myColor.getCIEy());\n    }\n    // Delay time is set to the conversion time * number of channels\n    // You need three channels for color sensing @ 200ms conversion time = 600ms.\n    delay(200);\n}\n</code></pre> <p>The hardware setup should look something like this: </p> <p></p> <p>Example 5 Setup</p> <p>The example code sets the interrupt pin as Pin 3, but if you change the code, you'll need to change the hardware setup. </p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. </p> <p></p> <p>Example 5 Output</p> <p>The output here sits at \"Ready to go\" until pin 3 is pulled low, then the output starts to roll by. </p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":""},{"location":"single_page/#resources","title":"Resources:","text":""},{"location":"single_page/#resources_1","title":"Resources  <p>For more resources related to the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic) boards, check out the links listed here: </p> <p>SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic):</p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> </ul> <p>SparkFun Mini Tristimulus Color Sensor - OPT4048DTSR (Qwiic):</p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> </ul> <p>General: </p> <ul> <li>Hardware GitHub Respository</li> <li>Arduino Library </li> <li>OPT4048 Datasheet (PDF)</li> </ul>","text":""},{"location":"software_setup/","title":"Software Setup","text":"<p>Arduino</p>"},{"location":"software_setup/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"software_setup/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"software_setup/#opt4048","title":"OPT4048","text":"<p>SparkFun has written a library to work with the SparkFun Tristimulus Color Sensors. This library can be used by extension with the SparkFun Tristimulus Color Sensor - OPT4048DTSR (Qwiic). You can obtain this library through the Arduino Library Manager by searching for \"OPT4048\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun OPT4048 Arduino Library (ZIP)"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"assets/board_files/","title":"board_files directory","text":"<ol> <li>A <code>dimensions*.pdf</code> file containing the board's measurements.</li> <li>A <code>schematic.pdf</code> file containing the board's schematics.</li> <li>An <code>eagle_files*.zip</code> folder containing the Eagle CAD schematics (<code>*.sch</code>) and PCB design (<code>*.brd</code>) files.<ul> <li>A freeware version of Autodesk Eagle can be found here. </li> </ul> </li> </ol>"},{"location":"assets/component_documentation/","title":"component_documentation directory","text":"<p>Copies of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p>"},{"location":"assets/img/","title":"img directory","text":"<p>This folder should contain the images for the product documentation</p>"},{"location":"assets/img/#general-images","title":"General Images","text":"<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (Cover page for with-pdf extension)</li> <li><code>sfe_logo_sq.png</code> - SparkFun flame logo (favicon)</li> </ul>"},{"location":"assets/img/#directory","title":"Directory","text":"<ul> <li><code>qr_code</code> - QR codes for the product documentation</li> </ul>"},{"location":"assets/img/#qr-codes","title":"QR Codes","text":"<ul> <li>QR code generator<ul> <li>Flame Color: #E0311D</li> <li>Frame Color: #3C464D</li> </ul> </li> <li>Remove meta data from svg</li> </ul>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Tristimulus Color Sensor - OPT4048 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Tristimulus Color Sensor - OPT4048 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Tristimulus Color Sensor - OPT4048 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Tristimulus Color Sensor - OPT4048 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}